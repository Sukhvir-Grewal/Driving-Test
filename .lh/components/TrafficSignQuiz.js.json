{
    "sourceFile": "components/TrafficSignQuiz.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1704388055677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704388063772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-export default function TrafficSign\n\\ No newline at end of file\n+export default function TrafficSignQuiz\n\\ No newline at end of file\n"
                },
                {
                    "date": 1704388081516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,346 @@\n+import Results from \"@/components/Results\";\r\n+import { signData } from \"@/storage/signsData\";\r\n+import { useRouter } from \"next/router\";\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+\r\n+export default function Quiz() {\r\n+    const MAX_QUESTIONS = 5;\r\n+    const router = useRouter();\r\n+\r\n+    const timeTickRef = useRef(null);\r\n+    const confirmContainerRef = useRef(null);\r\n+    const signContainerRef = useRef(null);\r\n+    const currentSignRef = useRef(null);\r\n+    const questionCountForTop = useRef(null);\r\n+    let timeoutRef = useRef(null);\r\n+    let runningTimeoutRef = useRef(null);\r\n+\r\n+    const optionContainerRef = Array.from({ length: 4 }, () => useRef());\r\n+    const [time, setTime] = useState(0);\r\n+    const [confirmDisplay, setConfirmDisplay] = useState(false);\r\n+    const [currentOptionSet, setCurrentOptionSet] = useState(0);\r\n+    const [currentAnswer, setCurrentAnswer] = useState(0);\r\n+\r\n+    const [score, setScore] = useState(0);\r\n+    const [questionCount, setQuestionCount] = useState(1);\r\n+    const [showResults, setShowResults] = useState(false);\r\n+    const [selectedOption, setSelectedOption] = useState(null);\r\n+    // const [storedWrongAnswers, SetStoredWrongAnswers] = useState([]);\r\n+    const [initialized, setInitialized] = useState(false);\r\n+    const [tractIndex, setTractIndex] = useState([]);\r\n+\r\n+    const [resultData, setResultData] = useState({\r\n+        time: { minutes: 0, seconds: 0 },\r\n+        totalQuestions: MAX_QUESTIONS,\r\n+        storedWrongAnswers: [],\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        return () => {\r\n+            clearTimeout(timeoutRef.current);\r\n+            clearInterval(runningTimeoutRef.current);\r\n+        };\r\n+    }, []);\r\n+\r\n+    useEffect(() => {\r\n+        if (!initialized) {\r\n+            getRandomQuestion();\r\n+            doInitialAnimation();\r\n+        }\r\n+        setInitialized(true);\r\n+    }, [initialized]);\r\n+\r\n+    useEffect(() => {\r\n+        runningTimeoutRef.current = setInterval(() => {\r\n+            setTime((prevTime) => prevTime + 1);\r\n+        }, 1000);\r\n+    }, []);\r\n+\r\n+    useEffect(() => {\r\n+        const minutes = Math.floor(time / 60);\r\n+        const seconds = time % 60;\r\n+\r\n+        const formattedTime = `${minutes.toString().padStart(2, \"0\")}:${seconds\r\n+            .toString()\r\n+            .padStart(2, \"0\")}`;\r\n+\r\n+        if (timeTickRef.current) {\r\n+            timeTickRef.current.innerHTML = formattedTime;\r\n+        }\r\n+\r\n+        setResultData((prevData) => ({\r\n+            ...prevData,\r\n+            time: {\r\n+                minutes: minutes,\r\n+                seconds: seconds,\r\n+            },\r\n+        }));\r\n+    }, [time]);\r\n+\r\n+    useEffect(() => {\r\n+        confirmContainerRef.current.style.visibility = confirmDisplay\r\n+            ? \"visible\"\r\n+            : \"hidden\";\r\n+    }, [confirmDisplay]);\r\n+\r\n+    const handleOptionClick = (index) => {\r\n+        if (selectedOption !== null) {\r\n+            optionContainerRef[selectedOption].current.style.backgroundColor =\r\n+                \"\";\r\n+        }\r\n+\r\n+        if (selectedOption === index) {\r\n+            setSelectedOption(null);\r\n+            setConfirmDisplay(false);\r\n+        } else {\r\n+            setConfirmDisplay(true);\r\n+            setSelectedOption(index);\r\n+            setCurrentAnswer(index + 1);\r\n+            optionContainerRef[index].current.style.backgroundColor =\r\n+                \"rgb(27, 148, 27)\";\r\n+        }\r\n+    };\r\n+\r\n+    const renderOptions = () => {\r\n+        return Array.from({ length: 4 }, (_, index) => (\r\n+            <div\r\n+                key={index}\r\n+                ref={optionContainerRef[index]}\r\n+                onClick={() => handleOptionClick(index)}\r\n+                className=\"option-main-container\"\r\n+            >\r\n+                <div className=\"option-count\">{index + 1}</div>\r\n+                <div className=\"option\">\r\n+                    {signData[currentOptionSet].options[index]}\r\n+                </div>\r\n+            </div>\r\n+        ));\r\n+    };\r\n+\r\n+    const doInitialAnimation = () => {\r\n+        const onAnimationEnd = () => {\r\n+            // Remove event listeners to avoid potential issues\r\n+            signContainerRef.current.removeEventListener(\r\n+                \"animationend\",\r\n+                onAnimationEnd\r\n+            );\r\n+            confirmContainerRef.current.removeEventListener(\r\n+                \"animationend\",\r\n+                onAnimationEnd\r\n+            );\r\n+            optionContainerRef.forEach((option) => {\r\n+                option.current.removeEventListener(\r\n+                    \"animationend\",\r\n+                    onAnimationEnd\r\n+                );\r\n+            });\r\n+\r\n+            if (\r\n+                signContainerRef.current &&\r\n+                confirmContainerRef.current &&\r\n+                optionContainerRef.every((option) => option.current)\r\n+            ) {\r\n+                // Remove animation classes\r\n+                signContainerRef.current.classList.remove(\"fadeIn\");\r\n+                confirmContainerRef.current.classList.remove(\"fadeIn\");\r\n+                optionContainerRef.forEach((option) => {\r\n+                    option.current.classList.remove(\"fadeIn\");\r\n+                });\r\n+            }\r\n+        };\r\n+\r\n+        if (\r\n+            signContainerRef.current &&\r\n+            confirmContainerRef.current &&\r\n+            optionContainerRef.every((option) => option.current)\r\n+        ) {\r\n+            // Apply animation classes\r\n+            signContainerRef.current.classList.add(\"fadeIn\");\r\n+            confirmContainerRef.current.classList.add(\"fadeIn\");\r\n+            optionContainerRef.forEach((option) => {\r\n+                option.current.classList.add(\"fadeIn\");\r\n+            });\r\n+\r\n+            // Add event listeners to handle animation end\r\n+            signContainerRef.current.addEventListener(\r\n+                \"animationend\",\r\n+                onAnimationEnd\r\n+            );\r\n+            confirmContainerRef.current.addEventListener(\r\n+                \"animationend\",\r\n+                onAnimationEnd\r\n+            );\r\n+            optionContainerRef.forEach((option) => {\r\n+                option.current.addEventListener(\"animationend\", onAnimationEnd);\r\n+            });\r\n+        }\r\n+    };\r\n+\r\n+    const doTheAnimation = () => {\r\n+        confirmContainerRef.current.style.backgroundColor = \"rgb(27, 148, 27)\";\r\n+        signContainerRef.current.classList.add(\"slideLeft\");\r\n+        optionContainerRef.forEach((option) => {\r\n+            option.current.classList.add(\"slideLeft\");\r\n+        });\r\n+        confirmContainerRef.current.classList.add(\"slideLeft\");\r\n+\r\n+        timeoutRef.current = setTimeout(() => {\r\n+            confirmContainerRef.current.style.backgroundColor = \"transparent\";\r\n+            signContainerRef.current.classList.remove(\"slideLeft\");\r\n+            optionContainerRef.forEach((option) => {\r\n+                option.current.classList.remove(\"slideLeft\");\r\n+            });\r\n+            confirmContainerRef.current.classList.remove(\"slideLeft\");\r\n+\r\n+            slideRightAnimation();\r\n+        }, 1000);\r\n+    };\r\n+\r\n+    const slideRightAnimation = () => {\r\n+        signContainerRef.current.classList.add(\"slideRight\");\r\n+        optionContainerRef.forEach((option) => {\r\n+            option.current.classList.add(\"slideRight\");\r\n+        });\r\n+        confirmContainerRef.current.classList.add(\"slideRight\");\r\n+\r\n+        setConfirmDisplay(false);\r\n+        optionContainerRef.forEach((option) => {\r\n+            option.current.style.backgroundColor = \"\";\r\n+        });\r\n+        setQuestionCount((prev) => {\r\n+            var nextNumber = prev + 1;\r\n+            questionCountForTop.current.innerHTML = `${nextNumber}/${MAX_QUESTIONS}`;\r\n+            return nextNumber;\r\n+        });\r\n+\r\n+        timeoutRef.current = setTimeout(() => {\r\n+            signContainerRef.current.classList.remove(\"slideRight\");\r\n+            optionContainerRef.forEach((option) => {\r\n+                option.current.classList.remove(\"slideRight\");\r\n+            });\r\n+            confirmContainerRef.current.classList.remove(\"slideRight\");\r\n+        }, 1000);\r\n+    };\r\n+\r\n+    const checkAnswer = () => {\r\n+        const correctAnswerIndex = signData[currentOptionSet].correctAns;\r\n+\r\n+        // Check if the selected answer is correct\r\n+        if (currentAnswer === correctAnswerIndex) {\r\n+            setScore((prev) => prev + 1);\r\n+            optionContainerRef[\r\n+                currentAnswer - 1\r\n+            ].current.style.backgroundColor = \"rgb(27, 148, 27)\";\r\n+        } else {\r\n+            // Set the selected option to red\r\n+            optionContainerRef[\r\n+                currentAnswer - 1\r\n+            ].current.style.backgroundColor = \"rgb(255, 0, 0)\";\r\n+            // Set the correct answer to green\r\n+            optionContainerRef[\r\n+                correctAnswerIndex - 1\r\n+            ].current.style.backgroundColor = \"rgb(27, 148, 27)\";\r\n+\r\n+            const newWrongAnswer = {\r\n+                question: currentOptionSet,\r\n+                wrongAnswerIndex: currentAnswer - 1,\r\n+            };\r\n+\r\n+            setResultData((prevData) => ({\r\n+                ...prevData,\r\n+                storedWrongAnswers: [\r\n+                    ...prevData.storedWrongAnswers,\r\n+                    newWrongAnswer,\r\n+                ],\r\n+            }));\r\n+        }\r\n+    };\r\n+\r\n+    const continueQuiz = () => {\r\n+        return (\r\n+            <>\r\n+                <div className=\"quiz-nav-container\">\r\n+                    <div className=\"time-main-container\">\r\n+                        <div ref={timeTickRef} className=\"time-container\"></div>\r\n+                        <div className=\"clock-container\">\r\n+                            <i className=\"fa-solid fa-clock\"></i>\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+                <div className=\"quiz-outer-main-container\">\r\n+                    <div className=\"quiz-main-container\">\r\n+                        <div className=\"question-count-container\">\r\n+                            <div\r\n+                                ref={questionCountForTop}\r\n+                                className=\"question-count\"\r\n+                            >\r\n+                                1/{MAX_QUESTIONS}\r\n+                            </div>\r\n+                        </div>\r\n+                        <div\r\n+                            ref={signContainerRef}\r\n+                            className=\"sign-main-container\"\r\n+                        >\r\n+                            <div className=\"sign-container\">\r\n+                                {/* Image will go here! */}\r\n+                                <img\r\n+                                    ref={currentSignRef}\r\n+                                    className=\"sign-image\"\r\n+                                    src=\"\"\r\n+                                ></img>\r\n+                            </div>\r\n+                        </div>\r\n+                        {renderOptions()}\r\n+                        <div className=\"confirm-main-container\">\r\n+                            <div\r\n+                                ref={confirmContainerRef}\r\n+                                onClick={() => {\r\n+                                    checkAnswer();\r\n+                                    if (questionCount !== MAX_QUESTIONS) {\r\n+                                        timeoutRef.current = setTimeout(() => {\r\n+                                            getRandomQuestion();\r\n+                                        }, 1000);\r\n+                                        doTheAnimation();\r\n+                                    } else setShowResults(true);\r\n+                                }}\r\n+                                className=\"confirm-container\"\r\n+                            >\r\n+                                <i className=\"fa-solid fa-check\"></i>\r\n+                            </div>\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+            </>\r\n+        );\r\n+    };\r\n+\r\n+    const getRandomQuestion = () => {\r\n+        var randomOptionSet;\r\n+        while (true) {\r\n+            randomOptionSet = Math.floor(Math.random() * 77);\r\n+            if (tractIndex.includes(randomOptionSet)) continue;\r\n+            else {\r\n+                const newData = [...tractIndex, randomOptionSet];\r\n+                setTractIndex(newData);\r\n+                break;\r\n+            }\r\n+        }\r\n+\r\n+        if (currentSignRef.current)\r\n+            currentSignRef.current.src = signData[randomOptionSet].imageUrl;\r\n+        setCurrentOptionSet(randomOptionSet);\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            {showResults ? (\r\n+                <>\r\n+                    {clearInterval(runningTimeoutRef.current)}\r\n+                    <Results resultData={resultData} />\r\n+                </>\r\n+            ) : (\r\n+                continueQuiz()\r\n+            )}\r\n+        </>\r\n+    );\r\n+}\r\n"
                }
            ],
            "date": 1704388055677,
            "name": "Commit-0",
            "content": "export default function T"
        }
    ]
}