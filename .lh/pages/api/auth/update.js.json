{
    "sourceFile": "pages/api/auth/update.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 100,
            "patches": [
                {
                    "date": 1705957269008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705957331780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \r\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n-    if (req.method === \"POST\") {\r\n+    if (req.method === \"PUT\") {\r\n         const { username, password } = req.body;\r\n \r\n         try {\r\n             const user = await User.findOne({ username });\r\n"
                },
                {
                    "date": 1705957338264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n-        const { username, password } = req.body;\r\n+        const { username } = req.body;\r\n \r\n         try {\r\n             const user = await User.findOne({ username });\r\n \r\n"
                },
                {
                    "date": 1705957424050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n             const user = await User.findOne({ username });\r\n \r\n             if (!user) {\r\n                 console.log(\"No such user exists!\");\r\n-                return res.status(404).json({ message: \"No such user exists\" });\r\n+                return res.status(400).json({ message: \"No such user exists\" });\r\n             }\r\n \r\n             const passwordMatch = await bcrypt.compare(password, user.password);\r\n \r\n"
                },
                {
                    "date": 1705957439788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (!user) {\r\n+                console.log(\"User Already !\");\r\n+                return res.status(400).json({ message: \"User Already \" });\r\n+            }\r\n+\r\n+            const passwordMatch = await bcrypt.compare(password, user.password);\r\n+\r\n+            if (passwordMatch) {\r\n+                // Successful login\r\n+\r\n+                res.status(200).json({\r\n+                    message: \"Login successful\",\r\n+                    userData: user,\r\n+                });\r\n+            } else {\r\n+                console.log(\"Wrong password\");\r\n+                res.status(401).json({\r\n+                    message: \"Wrong username or password\",\r\n+                    match: false,\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705957454682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            const passwordMatch = await bcrypt.compare(password, user.password);\r\n+\r\n+            if (passwordMatch) {\r\n+                // Successful login\r\n+\r\n+                res.status(200).json({\r\n+                    message: \"Login successful\",\r\n+                    userData: user,\r\n+                });\r\n+            } else {\r\n+                console.log(\"Wrong password\");\r\n+                res.status(401).json({\r\n+                    message: \"Wrong username or password\",\r\n+                    match: false,\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705957477364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+\r\n+            if (passwordMatch) {\r\n+                // Successful login\r\n+\r\n+                res.status(200).json({\r\n+                    message: \"Login successful\",\r\n+                    userData: user,\r\n+                });\r\n+            } else {\r\n+                console.log(\"Wrong password\");\r\n+                res.status(401).json({\r\n+                    message: \"Wrong username or password\",\r\n+                    match: false,\r\n+                });\r\n+            }\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705957486117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,8 @@\n                 res.status(200).json({\r\n                     message: \"Login successful\",\r\n                     userData: user,\r\n                 });\r\n-            } else {\r\n-                console.log(\"Wrong password\");\r\n-                res.status(401).json({\r\n-                    message: \"Wrong username or password\",\r\n-                    match: false,\r\n-                });\r\n             }\r\n         } catch (error) {\r\n             console.error(\"Error during login:\", error);\r\n             res.status(500).json({\r\n"
                },
                {
                    "date": 1705957492296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959574776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959582076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.up\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959587953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.updateOne()\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959606045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.updateOne({})\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959612765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.updateOne({$set: })\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959618806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.updateOne({$set: {username: username}})\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            console.error(\"Error during login:\", error);\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959641951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.updateOne({$set: {username: username}})\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during login\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959653254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+const bcrypt = require(\"bcrypt\");\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.updateOne({ $set: { username: username } });\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959660773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            user.updateOne({ $set: { username: username } });\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705959736413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n                 console.log(\"User Already Exists!\");\r\n                 return res.status(400).json({ message: \"User Already Exists\" });\r\n             }\r\n \r\n-            user.updateOne({ $set: { username: username } });\r\n+            await user.updateOne({ $set: { username: username } });\r\n \r\n             res.status(200).json({\r\n                 message: \"Login successful\",\r\n                 userData: user,\r\n"
                },
                {
                    "date": 1705975646813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const user = await User.findOne({ username });\r\n+\r\n+            if (user) {\r\n+                console.log(\"User Already Exists!\");\r\n+                return res.status(400).json({ message: \"User Already Exists\" });\r\n+            }\r\n+\r\n+            await user.updateOne({ $set: { username: username } });\r\n+            user = await User.findOne({ username });\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705986265345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     if (req.method === \"PUT\") {\r\n         const { username } = req.body;\r\n \r\n         try {\r\n-            const user = await User.findOne({ username });\r\n+            let user = await User.findOne({ username });\r\n \r\n             if (user) {\r\n                 console.log(\"User Already Exists!\");\r\n                 return res.status(400).json({ message: \"User Already Exists\" });\r\n@@ -31,535 +31,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            await user.updateOne({ $set: { username: username } });\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            user.updateOne({ $set: { username: username } });\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            user.updateOne({$set: {username: username}})\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            user.updateOne({$set: {username: username}})\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            user.updateOne({$set: })\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            user.updateOne({})\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            user.updateOne()\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            user.up\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            user.\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-\r\n-            if (passwordMatch) {\r\n-                // Successful login\r\n-\r\n-                res.status(200).json({\r\n-                    message: \"Login successful\",\r\n-                    userData: user,\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (user) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n-\r\n-            const passwordMatch = await bcrypt.compare(password, user.password);\r\n-\r\n-            if (passwordMatch) {\r\n-                // Successful login\r\n-\r\n-                res.status(200).json({\r\n-                    message: \"Login successful\",\r\n-                    userData: user,\r\n-                });\r\n-            } else {\r\n-                console.log(\"Wrong password\");\r\n-                res.status(401).json({\r\n-                    message: \"Wrong username or password\",\r\n-                    match: false,\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (!user) {\r\n-                console.log(\"User Already !\");\r\n-                return res.status(400).json({ message: \"User Already \" });\r\n-            }\r\n-\r\n-            const passwordMatch = await bcrypt.compare(password, user.password);\r\n-\r\n-            if (passwordMatch) {\r\n-                // Successful login\r\n-\r\n-                res.status(200).json({\r\n-                    message: \"Login successful\",\r\n-                    userData: user,\r\n-                });\r\n-            } else {\r\n-                console.log(\"Wrong password\");\r\n-                res.status(401).json({\r\n-                    message: \"Wrong username or password\",\r\n-                    match: false,\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-const bcrypt = require(\"bcrypt\");\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const user = await User.findOne({ username });\r\n-\r\n-            if (!user) {\r\n-                console.log(\"No such user exists!\");\r\n-                return res.status(400).json({ message: \"No such user exists\" });\r\n-            }\r\n-\r\n-            const passwordMatch = await bcrypt.compare(password, user.password);\r\n-\r\n-            if (passwordMatch) {\r\n-                // Successful login\r\n-\r\n-                res.status(200).json({\r\n-                    message: \"Login successful\",\r\n-                    userData: user,\r\n-                });\r\n-            } else {\r\n-                console.log(\"Wrong password\");\r\n-                res.status(401).json({\r\n-                    message: \"Wrong username or password\",\r\n-                    match: false,\r\n-                });\r\n-            }\r\n-        } catch (error) {\r\n-            console.error(\"Error during login:\", error);\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during login\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1705986468170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,13 @@\n     if (req.method === \"PUT\") {\r\n         const { username } = req.body;\r\n \r\n         try {\r\n-            let user = await User.findOne({ username });\r\n-\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { /* your filter criteria */ },\r\n+                { $set: { username: username } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n             if (user) {\r\n                 console.log(\"User Already Exists!\");\r\n                 return res.status(400).json({ message: \"User Already Exists\" });\r\n             }\r\n"
                },
                {
                    "date": 1705986492414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n                 { /* your filter criteria */ },\r\n                 { $set: { username: username } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n-            if (user) {\r\n+            if (updatedUser) {\r\n                 console.log(\"User Already Exists!\");\r\n                 return res.status(400).json({ message: \"User Already Exists\" });\r\n             }\r\n \r\n"
                },
                {
                    "date": 1705986512470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,12 @@\n                 { /* your filter criteria */ },\r\n                 { $set: { username: username } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n-            if (updatedUser) {\r\n-                console.log(\"User Already Exists!\");\r\n-                return res.status(400).json({ message: \"User Already Exists\" });\r\n-            }\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n \r\n             await user.updateOne({ $set: { username: username } });\r\n             user = await User.findOne({ username });\r\n \r\n"
                },
                {
                    "date": 1705986521213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { /* your filter criteria */ },\r\n+                { $set: { username: username } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: user,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705986527803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { /* your filter criteria */ },\r\n+                { $set: { username: username } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: updatedUser,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705986679226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                // { /* your filter criteria */ },\r\n+                { $set: { username: username } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: updatedUser,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705986689139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                {username: username}\r\n+                { $set: { username: username } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: updatedUser,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705986696253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                {username: username},\r\n+                { $set: { username: username } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Login successful\",\r\n+                userData: updatedUser,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705986703551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { username } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: username },\r\n+                { $set: { username: username } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+                userData: updatedUser,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705986884081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n                 { username: username },\r\n                 { $set: { username: username } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n+            conso\r\n             // if (updatedUser) {\r\n             //     console.log(\"User Already Exists!\");\r\n             //     return res.status(400).json({ message: \"User Already Exists\" });\r\n             // }\r\n@@ -31,211 +32,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                {username: username},\r\n-                { $set: { username: username } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: updatedUser,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                {username: username}\r\n-                { $set: { username: username } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: updatedUser,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                // { /* your filter criteria */ },\r\n-                { $set: { username: username } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: updatedUser,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { /* your filter criteria */ },\r\n-                { $set: { username: username } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: updatedUser,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { /* your filter criteria */ },\r\n-                { $set: { username: username } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { /* your filter criteria */ },\r\n-                { $set: { username: username } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            await user.updateOne({ $set: { username: username } });\r\n-            user = await User.findOne({ username });\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Login successful\",\r\n-                userData: user,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1705986890254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n                 { username: username },\r\n                 { $set: { username: username } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n-            conso\r\n+            console.log(username)\r\n             // if (updatedUser) {\r\n             //     console.log(\"User Already Exists!\");\r\n             //     return res.status(400).json({ message: \"User Already Exists\" });\r\n             // }\r\n"
                },
                {
                    "date": 1705987188242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n-        const { username } = req.body;\r\n+        const { old, new } = req.body;\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: username },\r\n"
                },
                {
                    "date": 1705987197600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n-        const { old, new } = req.body;\r\n+        const { d } = req.body;\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: username },\r\n"
                },
                {
                    "date": 1705987207417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { data } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: data.old },\r\n+                { $set: { username: username } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            console.log(username)\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+                userData: updatedUser,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987212976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { data } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: data.old },\r\n+                { $set: { username: data.new } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            console.log(username)\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+                userData: updatedUser,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987218194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { data } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: data.old },\r\n+                { $set: { username: data.new } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+            console.log(data)\r\n+            // if (updatedUser) {\r\n+            //     console.log(\"User Already Exists!\");\r\n+            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n+            // }\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+                userData: updatedUser,\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987239318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,16 @@\n                 { username: data.old },\r\n                 { $set: { username: data.new } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n-            console.log(data)\r\n+            console.log(data.new)\r\n             // if (updatedUser) {\r\n             //     console.log(\"User Already Exists!\");\r\n             //     return res.status(400).json({ message: \"User Already Exists\" });\r\n             // }\r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n-                userData: updatedUser,\r\n             });\r\n         } catch (error) {\r\n             res.status(500).json({\r\n                 message: \"Internal Server Error during Updating\",\r\n@@ -32,109 +31,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { data } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: data.old },\r\n-                { $set: { username: data.new } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            console.log(username)\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-                userData: updatedUser,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { data } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: data.old },\r\n-                { $set: { username: username } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            console.log(username)\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-                userData: updatedUser,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { d } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: username },\r\n-                { $set: { username: username } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            console.log(username)\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-                userData: updatedUser,\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1705987245345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,10 @@\n                 { $set: { username: data.new } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n             console.log(data.new)\r\n-            // if (updatedUser) {\r\n-            //     console.log(\"User Already Exists!\");\r\n-            //     return res.status(400).json({ message: \"User Already Exists\" });\r\n-            // }\r\n-\r\n             res.status(200).json({\r\n-                message: \"Update successful\",\r\n+                message: \"Update successful\"\r\n             });\r\n         } catch (error) {\r\n             res.status(500).json({\r\n                 message: \"Internal Server Error during Updating\",\r\n"
                },
                {
                    "date": 1705987309152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,19 +4,20 @@\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n-        const { data } = req.body;\r\n+        const { old, new: newUsername } = req.body;\r\n \r\n+\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: data.old },\r\n                 { $set: { username: data.new } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n-            console.log(data.new)\r\n+            console.log(data.new);\r\n             res.status(200).json({\r\n-                message: \"Update successful\"\r\n+                message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n             res.status(500).json({\r\n                 message: \"Internal Server Error during Updating\",\r\n"
                },
                {
                    "date": 1705987331538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,22 @@\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { old, new: newUsername } = req.body;\r\n \r\n-\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n-                { username: data.old },\r\n-                { $set: { username: data.new } },\r\n+                { username: old },\r\n+                { $set: { username: newUsername } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n-            console.log(data.new);\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(updatedUser.username);\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1705987414390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { old, new: newUsername } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: old },\r\n+                { $set: { username: newUsername } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"from server suide\"updatedUser.username);\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987658909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n                     message: \"User not found\",\r\n                 });\r\n             }\r\n \r\n-            console.log(\"from server suide\"updatedUser.username);\r\n+            console.log(\"old\", updatedUser.username);\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n@@ -33,40 +33,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { old, new: newUsername } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: old },\r\n-                { $set: { username: newUsername } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(updatedUser.username);\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1705987668615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { old, new: newUsername } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: old },\r\n+                { $set: { username: newUsername } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"old\", updatedUser.username);\r\n+            console.log(\"new\", new);\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987675534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { old, new: newUsername } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: old },\r\n+                { $set: { username: newUsername } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"old\", updatedUser.username);\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987680771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { old, new: newUsername } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: old },\r\n+                { $set: { username: newUsername } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"old\", updatedUser.username);\r\n+            console.log(\"new\", new);\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987709576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { old, new: newUsername } = req.body;\r\n+\r\n+        console.log(\"new\", new);\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: old },\r\n+                { $set: { username: newUsername } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"old\", updatedUser.username);\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987722537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { old, new } = req.body;\r\n+\r\n+        console.log(\"new\", newUsername);\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: old },\r\n+                { $set: { username: newUsername } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"old\", updatedUser.username);\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987729641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { old, newUsername } = req.body;\r\n+\r\n+        console.log(\"new\", newUsername);\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: old },\r\n+                { $set: { username: newUsername } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"old\", updatedUser.username);\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1705987737091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,23 +6,23 @@\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { old, newUsername } = req.body;\r\n \r\n-        console.log(\"new\", newUsername);\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: old },\r\n                 { $set: { username: newUsername } },\r\n                 { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(\"old\", updatedUser.username);\r\n+                );\r\n+                \r\n+                if (!updatedUser) {\r\n+                    return res.status(404).json({\r\n+                        message: \"User not found\",\r\n+                    });\r\n+                }\r\n+                \r\n+                console.log(\"old\", updatedUser.username);\r\n+                console.log(\"new\", newUsername);\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1705988023173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n-        const { old, newUsername } = req.body;\r\n+        const { new } = req.body;\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: old },\r\n@@ -19,9 +19,9 @@\n                         message: \"User not found\",\r\n                     });\r\n                 }\r\n                 \r\n-                console.log(\"old\", updatedUser.username);\r\n+                console.log(\"old\", old);\r\n                 console.log(\"new\", newUsername);\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n@@ -34,224 +34,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { old, new } = req.body;\r\n-\r\n-        console.log(\"new\", newUsername);\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: old },\r\n-                { $set: { username: newUsername } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(\"old\", updatedUser.username);\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { old, new: newUsername } = req.body;\r\n-\r\n-        console.log(\"new\", new);\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: old },\r\n-                { $set: { username: newUsername } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(\"old\", updatedUser.username);\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { old, new: newUsername } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: old },\r\n-                { $set: { username: newUsername } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(\"old\", updatedUser.username);\r\n-            console.log(\"new\", new);\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { old, new: newUsername } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: old },\r\n-                { $set: { username: newUsername } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(\"old\", updatedUser.username);\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { old, new: newUsername } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: old },\r\n-                { $set: { username: newUsername } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(\"old\", updatedUser.username);\r\n-            console.log(\"new\", new);\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { old, new: newUsername } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: old },\r\n-                { $set: { username: newUsername } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(\"old\", updatedUser.username);\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1705988038440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n-        const { new } = req.body;\r\n+        const { newName } = req.body;\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: old },\r\n"
                },
                {
                    "date": 1705988045342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n         const { newName } = req.body;\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n-                { username: old },\r\n+                { username: \"sukhvir\" },\r\n                 { $set: { username: newUsername } },\r\n                 { new: true } // to get the updated document\r\n                 );\r\n                 \r\n"
                },
                {
                    "date": 1705988051507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: \"sukhvir\" },\r\n-                { $set: { username: newUsername } },\r\n+                { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n                 );\r\n                 \r\n                 if (!updatedUser) {\r\n"
                },
                {
                    "date": 1705988067256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,18 +11,18 @@\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: \"sukhvir\" },\r\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n-                );\r\n-                \r\n-                if (!updatedUser) {\r\n-                    return res.status(404).json({\r\n-                        message: \"User not found\",\r\n-                    });\r\n-                }\r\n-                \r\n-                console.log(\"old\", old);\r\n-                console.log(\"new\", newUsername);\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"old\", old);\r\n+            console.log(\"new\", newUsername);\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1706027428660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: \"sukhvir\" },\r\n                 { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n             );\r\n \r\n             if (!updatedUser) {\r\n                 return res.status(404).json({\r\n"
                },
                {
                    "date": 1706027434334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: \"sukhvir\" },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            if (!updatedUser) {\r\n+                return res.status(404).json({\r\n+                    message: \"User not found\",\r\n+                });\r\n+            }\r\n+\r\n+            console.log(\"old\", old);\r\n+            console.log(\"new\", newUsername);\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706027601886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,8 @@\n                     message: \"User not found\",\r\n                 });\r\n             }\r\n \r\n-            console.log(\"old\", old);\r\n-            console.log(\"new\", newUsername);\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n@@ -34,40 +32,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: \"sukhvir\" },\r\n-                { $set: { username: newName } },\r\n-            );\r\n-\r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n-\r\n-            console.log(\"old\", old);\r\n-            console.log(\"new\", newUsername);\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1706027620529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,10 @@\n                     message: \"User not found\",\r\n                 });\r\n             }\r\n \r\n+            console.log(\"old\", updatedUser.username);\r\n+            console.log(\"new\", newName);\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1706027639943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,16 +13,14 @@\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n-            if (!updatedUser) {\r\n-                return res.status(404).json({\r\n-                    message: \"User not found\",\r\n-                });\r\n-            }\r\n+            // if (!updatedUser) {\r\n+            //     return res.status(404).json({\r\n+            //         message: \"User not found\",\r\n+            //     });\r\n+            // }\r\n \r\n-            console.log(\"old\", updatedUser.username);\r\n-            console.log(\"new\", newName);\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1706027684068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,14 +13,8 @@\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n-            // if (!updatedUser) {\r\n-            //     return res.status(404).json({\r\n-            //         message: \"User not found\",\r\n-            //     });\r\n-            // }\r\n-\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1706027865016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n                 { username: \"sukhvir\" },\r\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n+            \r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n"
                },
                {
                    "date": 1706027871309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: \"sukhvir\" },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            Cookies.\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706027878640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: \"sukhvir\" },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            Cookies.\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706027889974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,66 +29,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: \"sukhvir\" },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            Cookies.\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: \"sukhvir\" },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-            \r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1706028017205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: \"sukhvir\" },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            Cookies.set(\"user\", JSON.stringify(updatedUser), { expires: 7 });\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706028024189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: \"sukhvir\" },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            Cookies.set(\"user\", JSON.stringify(updatedUser), { expires: 7 });\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+                \r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706028122385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n             Cookies.set(\"user\", JSON.stringify(updatedUser), { expires: 7 });\r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n-                \r\n+                userData: updatedUser\r\n             });\r\n         } catch (error) {\r\n             res.status(500).json({\r\n                 message: \"Internal Server Error during Updating\",\r\n@@ -30,68 +30,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: \"sukhvir\" },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            Cookies.set(\"user\", JSON.stringify(updatedUser), { expires: 7 });\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: \"sukhvir\" },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            Cookies.\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1706028856687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n-            Cookies.set(\"user\", JSON.stringify(updatedUser), { expires: 7 });\r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n                 userData: updatedUser\r\n"
                },
                {
                    "date": 1706028979402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n-                userData: updatedUser\r\n+                userData: updatedUser.username\r\n             });\r\n         } catch (error) {\r\n             res.status(500).json({\r\n                 message: \"Internal Server Error during Updating\",\r\n"
                },
                {
                    "date": 1706029030127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,11 @@\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n-\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n-                userData: updatedUser.username\r\n+                userData: updatedUser.username,\r\n             });\r\n         } catch (error) {\r\n             res.status(500).json({\r\n                 message: \"Internal Server Error during Updating\",\r\n"
                },
                {
                    "date": 1706029036096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n+            console\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n                 userData: updatedUser.username,\r\n             });\r\n"
                },
                {
                    "date": 1706029044463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,11 @@\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n-            console\r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n-                userData: updatedUser.username,\r\n+                userData: newName,\r\n             });\r\n         } catch (error) {\r\n             res.status(500).json({\r\n                 message: \"Internal Server Error during Updating\",\r\n"
                },
                {
                    "date": 1706029540519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,15 @@\n         const { newName } = req.body;\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n-                { username: \"sukhvir\" },\r\n+                { username:  },\r\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n-                userData: newName,\r\n             });\r\n         } catch (error) {\r\n             res.status(500).json({\r\n                 message: \"Internal Server Error during Updating\",\r\n"
                },
                {
                    "date": 1706029546234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n         const { newName } = req.body;\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n-                { username:  },\r\n+                { username: \"sukhvir\" },\r\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n"
                },
                {
                    "date": 1706029551628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n+        const \r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: \"sukhvir\" },\r\n"
                },
                {
                    "date": 1706029558049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        const \r\n+        const [user, setuser]\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: \"sukhvir\" },\r\n"
                },
                {
                    "date": 1706029564944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+        const [user, setUser] = use\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: \"sukhvir\" },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706029575327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,16 @@\n import Cookies from \"js-cookie\";\r\n import User from \"./User\";\r\n import connectDB from \"./mongo\";\r\n+import { useAtom } from \"jotai\";\r\n+import { userData } from \"@/jotaiStorage\";\r\n \r\n connectDB();\r\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        const [user, setUser] = use\r\n+        const [user, setUser] = useAtom(userData)\r\n \r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: \"sukhvir\" },\r\n@@ -28,35 +30,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-        const [user, setuser]\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: \"sukhvir\" },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1706029582908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+import { useAtom } from \"jotai\";\r\n+import { userData } from \"@/jotaiStorage\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+        const [user, setUser] = useAtom(userData)\r\n+\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: user. },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706029768735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n         const [user, setUser] = useAtom(userData)\r\n-\r\n+        console\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n-                { username: user. },\r\n+                { username: user.username },\r\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n@@ -30,37 +30,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-import { useAtom } from \"jotai\";\r\n-import { userData } from \"@/jotaiStorage\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-        const [user, setUser] = useAtom(userData)\r\n-\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: \"sukhvir\" },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1706029777803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n         const [user, setUser] = useAtom(userData)\r\n-        console\r\n+        console.log(' we have name')\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: user.username },\r\n                 { $set: { username: newName } },\r\n"
                },
                {
                    "date": 1706029786417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        const [user, setUser] = useAtom(userData)\r\n-        console.log(' we have name')\r\n+        const [user, setUser] = useAtom(userData);\r\n+        console.log(\" we have name\", user.username);\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: user.username },\r\n                 { $set: { username: newName } },\r\n"
                },
                {
                    "date": 1706029807152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,13 @@\n         const { newName } = req.body;\r\n         const [user, setUser] = useAtom(userData);\r\n         console.log(\" we have name\", user.username);\r\n         try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: user.username },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n+            // const updatedUser = await User.findOneAndUpdate(\r\n+            //     { username: user.username },\r\n+            //     { $set: { username: newName } },\r\n+            //     { new: true } // to get the updated document\r\n+            // );\r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n"
                },
                {
                    "date": 1706029818336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,16 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        const [user, setUser] = useAtom(userData);\r\n+        // const [user, setUser] = useAtom(userData);\r\n         console.log(\" we have name\", user.username);\r\n         try {\r\n-            // const updatedUser = await User.findOneAndUpdate(\r\n-            //     { username: user.username },\r\n-            //     { $set: { username: newName } },\r\n-            //     { new: true } // to get the updated document\r\n-            // );\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: user.username },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n"
                },
                {
                    "date": 1706029859430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,13 @@\n         const { newName } = req.body;\r\n         // const [user, setUser] = useAtom(userData);\r\n         console.log(\" we have name\", user.username);\r\n         try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: user.username },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n+            // const updatedUser = await User.findOneAndUpdate(\r\n+            //     { username: user.username },\r\n+            //     { $set: { username: newName } },\r\n+            //     { new: true } // to get the updated document\r\n+            // );\r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n"
                },
                {
                    "date": 1706029867729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        // const [user, setUser] = useAtom(userData);\r\n+        const [user, setUser] = useAtom(userData);\r\n         console.log(\" we have name\", user.username);\r\n         try {\r\n             // const updatedUser = await User.findOneAndUpdate(\r\n             //     { username: user.username },\r\n"
                },
                {
                    "date": 1706029874376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,24 +10,24 @@\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n         const [user, setUser] = useAtom(userData);\r\n         console.log(\" we have name\", user.username);\r\n-        try {\r\n-            // const updatedUser = await User.findOneAndUpdate(\r\n-            //     { username: user.username },\r\n-            //     { $set: { username: newName } },\r\n-            //     { new: true } // to get the updated document\r\n-            // );\r\n+        // try {\r\n+        //     // const updatedUser = await User.findOneAndUpdate(\r\n+        //     //     { username: user.username },\r\n+        //     //     { $set: { username: newName } },\r\n+        //     //     { new: true } // to get the updated document\r\n+        //     // );\r\n \r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n+        //     res.status(200).json({\r\n+        //         message: \"Update successful\",\r\n+        //     });\r\n+        // } catch (error) {\r\n+        //     res.status(500).json({\r\n+        //         message: \"Internal Server Error during Updating\",\r\n+        //         error: error.message,\r\n+        //     });\r\n+        // }\r\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1706029903415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,26 +8,26 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        const [user, setUser] = useAtom(userData);\r\n-        console.log(\" we have name\", user.username);\r\n-        // try {\r\n-        //     // const updatedUser = await User.findOneAndUpdate(\r\n-        //     //     { username: user.username },\r\n-        //     //     { $set: { username: newName } },\r\n-        //     //     { new: true } // to get the updated document\r\n-        //     // );\r\n+        // const [user, setUser] = useAtom(userData);\r\n+        // console.log(\" we have name\", user.username);\r\n+        try {\r\n+            // const updatedUser = await User.findOneAndUpdate(\r\n+            //     { username: user.username },\r\n+            //     { $set: { username: newName } },\r\n+            //     { new: true } // to get the updated document\r\n+            // );\r\n \r\n-        //     res.status(200).json({\r\n-        //         message: \"Update successful\",\r\n-        //     });\r\n-        // } catch (error) {\r\n-        //     res.status(500).json({\r\n-        //         message: \"Internal Server Error during Updating\",\r\n-        //         error: error.message,\r\n-        //     });\r\n-        // }\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1706029948685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,15 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        // const [user, setUser] = useAtom(userData);\r\n-        // console.log(\" we have name\", user.username);\r\n+        \r\n         try {\r\n-            // const updatedUser = await User.findOneAndUpdate(\r\n-            //     { username: user.username },\r\n-            //     { $set: { username: newName } },\r\n-            //     { new: true } // to get the updated document\r\n-            // );\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: user.username },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n \r\n             res.status(200).json({\r\n                 message: \"Update successful\",\r\n             });\r\n"
                },
                {
                    "date": 1706029954685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        \r\n+        const {user}\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: user.username },\r\n                 { $set: { username: newName } },\r\n"
                },
                {
                    "date": 1706029962534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        const {user}\r\n+        const {username: req.coo}\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: user.username },\r\n                 { $set: { username: newName } },\r\n"
                },
                {
                    "date": 1706029968040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+import { useAtom } from \"jotai\";\r\n+import { userData } from \"@/jotaiStorage\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+        const {username: req.cookies.user}\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: user.username },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706029976331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+import { useAtom } from \"jotai\";\r\n+import { userData } from \"@/jotaiStorage\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+        const {username req.cookies.user;\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: user.username },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706029981651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+import { useAtom } from \"jotai\";\r\n+import { userData } from \"@/jotaiStorage\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+        const { username } = req.cookies.user;\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                { username: user.username },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706030069954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,11 @@\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n         const { username } = req.cookies.user;\r\n         try {\r\n+            console.log(\"stored name\")\r\n             const updatedUser = await User.findOneAndUpdate(\r\n-                { username: user.username },\r\n+                { username: username },\r\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n@@ -29,100 +30,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-import { useAtom } from \"jotai\";\r\n-import { userData } from \"@/jotaiStorage\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-        const {username req.cookies.user;\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: user.username },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-import { useAtom } from \"jotai\";\r\n-import { userData } from \"@/jotaiStorage\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-        const {username: req.cookies.user}\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: user.username },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-import { useAtom } from \"jotai\";\r\n-import { userData } from \"@/jotaiStorage\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-        const {username: req.coo}\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: user.username },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1706030079647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n         const { username } = req.cookies.user;\r\n+        console.log(\"stored name\", username)\r\n         try {\r\n-            console.log(\"stored name\")\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 { username: username },\r\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n"
                },
                {
                    "date": 1706030165324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+import { useAtom } from \"jotai\";\r\n+import { userData } from \"@/jotaiStorage\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+        const { username } = req.cookies.user;\r\n+        console.log(\"stored name\", username)\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                {  username },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706030276180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n-        const { username } = req.cookies.user;\r\n+        const { old } = req.cookies.user;\r\n         console.log(\"stored name\", username)\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n                 {  username },\r\n@@ -30,37 +30,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-import { useAtom } from \"jotai\";\r\n-import { userData } from \"@/jotaiStorage\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-        const { username } = req.cookies.user;\r\n-        console.log(\"stored name\", username)\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                { username: username },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1706030287717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import Cookies from \"js-cookie\";\r\n+import User from \"./User\";\r\n+import connectDB from \"./mongo\";\r\n+import { useAtom } from \"jotai\";\r\n+import { userData } from \"@/jotaiStorage\";\r\n+\r\n+connectDB();\r\n+\r\n+export default async function handler(req, res) {\r\n+    if (req.method === \"PUT\") {\r\n+        const { newName } = req.body;\r\n+        const { old } = req.body;\r\n+        console.log(\"stored name\", username)\r\n+        try {\r\n+            const updatedUser = await User.findOneAndUpdate(\r\n+                {  username: old },\r\n+                { $set: { username: newName } },\r\n+                { new: true } // to get the updated document\r\n+            );\r\n+\r\n+            res.status(200).json({\r\n+                message: \"Update successful\",\r\n+            });\r\n+        } catch (error) {\r\n+            res.status(500).json({\r\n+                message: \"Internal Server Error during Updating\",\r\n+                error: error.message,\r\n+            });\r\n+        }\r\n+    } else {\r\n+        res.status(405).json({ message: \"Method Not Allowed\" });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1706030374685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n export default async function handler(req, res) {\r\n     if (req.method === \"PUT\") {\r\n         const { newName } = req.body;\r\n         const { old } = req.body;\r\n-        console.log(\"stored name\", username)\r\n+        console.log(\"stored name\", old);\r\n         try {\r\n             const updatedUser = await User.findOneAndUpdate(\r\n-                {  username: old },\r\n+                { username: old },\r\n                 { $set: { username: newName } },\r\n                 { new: true } // to get the updated document\r\n             );\r\n \r\n@@ -30,37 +30,4 @@\n     } else {\r\n         res.status(405).json({ message: \"Method Not Allowed\" });\r\n     }\r\n }\r\n-import Cookies from \"js-cookie\";\r\n-import User from \"./User\";\r\n-import connectDB from \"./mongo\";\r\n-import { useAtom } from \"jotai\";\r\n-import { userData } from \"@/jotaiStorage\";\r\n-\r\n-connectDB();\r\n-\r\n-export default async function handler(req, res) {\r\n-    if (req.method === \"PUT\") {\r\n-        const { newName } = req.body;\r\n-        const { old } = req.cookies.user;\r\n-        console.log(\"stored name\", username)\r\n-        try {\r\n-            const updatedUser = await User.findOneAndUpdate(\r\n-                {  username },\r\n-                { $set: { username: newName } },\r\n-                { new: true } // to get the updated document\r\n-            );\r\n-\r\n-            res.status(200).json({\r\n-                message: \"Update successful\",\r\n-            });\r\n-        } catch (error) {\r\n-            res.status(500).json({\r\n-                message: \"Internal Server Error during Updating\",\r\n-                error: error.message,\r\n-            });\r\n-        }\r\n-    } else {\r\n-        res.status(405).json({ message: \"Method Not Allowed\" });\r\n-    }\r\n-}\r\n"
                }
            ],
            "date": 1705957269008,
            "name": "Commit-0",
            "content": "import User from \"./User\";\r\nimport connectDB from \"./mongo\";\r\n\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\nconnectDB();\r\n\r\nexport default async function handler(req, res) {\r\n    if (req.method === \"POST\") {\r\n        const { username, password } = req.body;\r\n\r\n        try {\r\n            const user = await User.findOne({ username });\r\n\r\n            if (!user) {\r\n                console.log(\"No such user exists!\");\r\n                return res.status(404).json({ message: \"No such user exists\" });\r\n            }\r\n\r\n            const passwordMatch = await bcrypt.compare(password, user.password);\r\n\r\n            if (passwordMatch) {\r\n                // Successful login\r\n\r\n                res.status(200).json({\r\n                    message: \"Login successful\",\r\n                    userData: user,\r\n                });\r\n            } else {\r\n                console.log(\"Wrong password\");\r\n                res.status(401).json({\r\n                    message: \"Wrong username or password\",\r\n                    match: false,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error during login:\", error);\r\n            res.status(500).json({\r\n                message: \"Internal Server Error during login\",\r\n                error: error.message,\r\n            });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: \"Method Not Allowed\" });\r\n    }\r\n}\r\n"
        }
    ]
}